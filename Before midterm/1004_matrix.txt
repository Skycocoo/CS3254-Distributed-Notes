package main

import (
    "fmt"
    "math/rand"
    "time"
)

const DIMX = 10000
const DIMY = 10000
var mymatrix *[DIMX][DIMY]int

func generate() {
    mymatrix=new([DIMX][DIMY]int)
    for i:=0; i< DIMX ; i++ {
        for j:=0; j<DIMY; j++ {
            mymatrix[i][j] = rand.Intn(5000)
        }
    }
    fmt.Println("Finished generating matrix")
}

func sequential_sum() {
    total := 0
    for i := 0; i< len(mymatrix); i++ {
        for j:=0; j<len(mymatrix[i]); j++ {
            total += mymatrix[i][j]
        }
    }
    fmt.Println("sequential_sum got",total)
}

func parallel_sum() {
    // student exercise
    /*
        complete this function to print out a sum
        of the matrix. Use parallel processing
        to speed up the operation
    */
    total := 0
    row_sum_chan := make(chan int, len(mymatrix))
    for i := 0; i < len(mymatrix); i++ {
        go func(row int) {
            row_sum := 0
            // cannot do len(mymatrix[i]): i might be changed to next value (because i++)
            for j := 0; j < len(mymatrix[row]); j++ {
                row_sum += mymatrix[row][j]
            }
            row_sum_chan<-row_sum
        }(i)
    }

    for i := 0; i < len(mymatrix); i++ {
        total += <-row_sum_chan
    }

    fmt.Println("parallel_sum got",total)
}

func main() {
    generate()
    start := time.Now()
    sequential_sum()
    fmt.Println(time.Since(start))
    start = time.Now()
    parallel_sum()
    fmt.Println(time.Since(start))

    // sequential faster than parallel when length is small:
    // thread overhead & context switch

    // run sequential & parallel in parallel: race condition to write in the same channel ("fan in")
}
